// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebTextForum.Helpers;

#nullable disable

namespace WebTextForum.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241107055516_BlogItems")]
    partial class BlogItems
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "05507b6f-3d69-4b68-b53f-80a0128f56a8",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "4fc03002-6ae6-4030-84b4-4048cd4c4422",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "04628fcb-8950-43ca-892d-cbb12188a3ce",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c941bdb5-7731-488d-915c-68369d93f827",
                            Email = "Moderator1@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "MODERATOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEMN+VlSNOhgfgApe86Cnh8nbMtanSBRd7f1j+xkhknjx0HuXVVPa6WTKwhzK7g5nQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a6363ff1-87fa-48da-90a6-523ef553546e",
                            TwoFactorEnabled = false,
                            UserName = "Moderator"
                        },
                        new
                        {
                            Id = "a2e4511d-1d6a-4364-8761-0cf74828e790",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8999439b-e4c9-479e-9808-3256f17cc8bf",
                            Email = "User1@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEFBWg6nDvsn6mJjy7Ra4cIQItA+FOmewiIMOKKMwgbnoMSiM2lhxBV5eBZ2Es0/b7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f827187-0d89-45cc-9564-4a965d6104f4",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "5bb0ee5a-4a6d-4233-aa05-5fb1b49e0c6b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93338151-9ec2-43aa-b8bd-3e2e2f8d47e8",
                            Email = "User2@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEMKev3Sc0Te1oFGlPB55Xo7nlJdCwez13OwcRtSD/BZCC5JIes2YFiqWZjW2wHT1rA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6687675-ff27-4f80-b5ca-3c39e3e1e138",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = "0639fdf2-e318-4362-bcb3-ada6d381081a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b50badb-fc7e-425a-aa71-b5a9924c6990",
                            Email = "User3@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAECK4R9dmaij91atlj7Zrs2OxDH6Lf+2OcuJMJH2hGfVfgHxWH/9G8+DerslQkbDrrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d1bf58e-9598-40dc-b7aa-072293d6a51b",
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = "456241b5-dbbd-4cb4-84f2-f8648a7a9932",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "28dcf23d-5281-4ea6-926e-79787872189b",
                            Email = "User4@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAEO1wmhCnSNNO7P6evtBASkqgRHb+XWr5+UmM7/vFYXsuRPmJm5oVUJld5XlFt1R5RQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "930c2a30-2d13-4470-8484-a3da76ec00c1",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "04628fcb-8950-43ca-892d-cbb12188a3ce",
                            RoleId = "05507b6f-3d69-4b68-b53f-80a0128f56a8"
                        },
                        new
                        {
                            UserId = "a2e4511d-1d6a-4364-8761-0cf74828e790",
                            RoleId = "4fc03002-6ae6-4030-84b4-4048cd4c4422"
                        },
                        new
                        {
                            UserId = "5bb0ee5a-4a6d-4233-aa05-5fb1b49e0c6b",
                            RoleId = "4fc03002-6ae6-4030-84b4-4048cd4c4422"
                        },
                        new
                        {
                            UserId = "0639fdf2-e318-4362-bcb3-ada6d381081a",
                            RoleId = "4fc03002-6ae6-4030-84b4-4048cd4c4422"
                        },
                        new
                        {
                            UserId = "456241b5-dbbd-4cb4-84f2-f8648a7a9932",
                            RoleId = "4fc03002-6ae6-4030-84b4-4048cd4c4422"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebTextForum.Entities.BlogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BlogItemParentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BlogItemParentId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogItems");
                });

            modelBuilder.Entity("WebTextForum.Entities.BlogItemLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BlogItemLikes");
                });

            modelBuilder.Entity("WebTextForum.Entities.BlogItemTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogItemTags");
                });

            modelBuilder.Entity("WebTextForum.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Misleading or False Information"
                        },
                        new
                        {
                            Id = 2,
                            Name = "News"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Personal"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Code"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebTextForum.Entities.BlogItem", b =>
                {
                    b.HasOne("WebTextForum.Entities.BlogItem", "BlogItemParent")
                        .WithMany()
                        .HasForeignKey("BlogItemParentId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogItemParent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebTextForum.Entities.BlogItemTag", b =>
                {
                    b.HasOne("WebTextForum.Entities.BlogItemTag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
