// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebTextForum.Helpers;

#nullable disable

namespace WebTextForum.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241109123708_setupnewIds")]
    partial class setupnewIds
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "644eccda-38c0-46f7-bb1b-a98b27cab0d7",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "e29d1a8c-37f0-4c8f-8507-a6e1d721b9e0",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "52b3b000-3e20-4aba-98df-01a0664b7dd6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8996d11-8e57-42f2-bda4-17e7172db596",
                            Email = "Moderator1@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "MODERATOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEHXlUh7l9hDzHYCvc8hlxm1/glL7Mgfk8FYpH/OripSzjABqO6AuUh7SoEtjcwiiTw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b9794cb-f0f0-4ac6-8a98-5fcb85e3c8e8",
                            TwoFactorEnabled = false,
                            UserName = "Moderator"
                        },
                        new
                        {
                            Id = "1067d34e-dabe-4647-8394-4153fdd40ea9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aad79c50-dd23-452e-bb85-51aa0efd5b1a",
                            Email = "User1@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEOXZKTBLkrSdKMav2cOepQvAAgcqFwqMLUxLjtqEKRt65vDd/fALirvS8JLk1/8Pfg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2317d47c-81a6-447b-8980-86745e98d2bd",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "655bba26-12aa-494e-abf6-c53783668562",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b40bc222-c043-4ad9-a4ab-03866b26fc4a",
                            Email = "User2@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEEUzfGkQ+RFvmIQ1qyAcEnTaBNaUOrBBUEeHEhXvDkXP+7jVWeDINFy4UV6D4RDpiw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6e5d0b7f-edcd-49fe-9c9c-657d60c128e1",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = "64b42dc6-5e1a-4273-a747-6394a7251e2c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2e72efa6-0d08-48a2-9894-5a2cdc7756f4",
                            Email = "User3@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEFAONf0MrcBK5NrBH6W+k0dklWjP5Byn2PXnTOZbYOF44WBmZ9MBNf9QAVodmeOfKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "82bcc7b8-dca2-4b78-ac66-63590c9faa64",
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = "fab38226-76e7-413d-a8b1-deb8a704c955",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66614a17-9c7b-4cf7-9988-bb6bdd1c988e",
                            Email = "User4@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAEEy7i2qwM7O4rjJRyahyg3zRIjY1jQwWUWcs76EnYY2C62uDlRcXVlulh6i0ZXDfAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07c6c9b4-94d4-4f96-8e3e-5d64f5a7d90a",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "52b3b000-3e20-4aba-98df-01a0664b7dd6",
                            RoleId = "644eccda-38c0-46f7-bb1b-a98b27cab0d7"
                        },
                        new
                        {
                            UserId = "1067d34e-dabe-4647-8394-4153fdd40ea9",
                            RoleId = "e29d1a8c-37f0-4c8f-8507-a6e1d721b9e0"
                        },
                        new
                        {
                            UserId = "655bba26-12aa-494e-abf6-c53783668562",
                            RoleId = "e29d1a8c-37f0-4c8f-8507-a6e1d721b9e0"
                        },
                        new
                        {
                            UserId = "64b42dc6-5e1a-4273-a747-6394a7251e2c",
                            RoleId = "e29d1a8c-37f0-4c8f-8507-a6e1d721b9e0"
                        },
                        new
                        {
                            UserId = "fab38226-76e7-413d-a8b1-deb8a704c955",
                            RoleId = "e29d1a8c-37f0-4c8f-8507-a6e1d721b9e0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebTextForum.Entities.BlogItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("BlogItemParentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BlogItemParentId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogItems");
                });

            modelBuilder.Entity("WebTextForum.Entities.BlogItemLike", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("BlogItemId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BlogItemId");

                    b.ToTable("BlogItemLikes");
                });

            modelBuilder.Entity("WebTextForum.Entities.BlogItemTag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("BlogItemId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BlogItemId");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogItemTags");
                });

            modelBuilder.Entity("WebTextForum.Entities.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = "0",
                            Name = "Misleading or False Information"
                        },
                        new
                        {
                            Id = "9f79a189-76aa-4469-bb1e-82ec6e09b403",
                            Name = "News"
                        },
                        new
                        {
                            Id = "6076b6c1-51bb-475e-8a4c-2dab7ab7ad5c",
                            Name = "Personal"
                        },
                        new
                        {
                            Id = "41df3503-c3fc-4812-bffa-b8e9feef03fe",
                            Name = "Code"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebTextForum.Entities.BlogItem", b =>
                {
                    b.HasOne("WebTextForum.Entities.BlogItem", "BlogItemParent")
                        .WithMany()
                        .HasForeignKey("BlogItemParentId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogItemParent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebTextForum.Entities.BlogItemLike", b =>
                {
                    b.HasOne("WebTextForum.Entities.BlogItem", null)
                        .WithMany("Likes")
                        .HasForeignKey("BlogItemId");
                });

            modelBuilder.Entity("WebTextForum.Entities.BlogItemTag", b =>
                {
                    b.HasOne("WebTextForum.Entities.BlogItem", null)
                        .WithMany("Tags")
                        .HasForeignKey("BlogItemId");

                    b.HasOne("WebTextForum.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebTextForum.Entities.BlogItem", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
